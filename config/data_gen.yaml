# Configuration of data generator
t_window: 6   # (Deprecated)
horizon: 1
# Hard code t_end for training and validation sets, disabling 
# t_end derivation in `cv` function
t_end_tr_hard: null 
t_end_val_hard: null
# Random seed for randomly sampling from whole dataset, -1 to disable
# rand_seed: -1

# =Client filter=
# Whether to drop samples with cold-start clients (present in y data), 
# because there's no historical txn information can be used.
drop_cs_cli: True
# Tolerance of number of dts used to generate each feature. The reason
# why to limit this is to improve the feature quality.
gen_feat_tlrnc: 0    
# Whether to drop chids with zero-NDCG evaluated by top1 and top2 models;
# that is, training samples performing worst in "both" models
drop_0ndcg_cli: False

# =Feature engineering specification=
feats_to_use:
    # Raw numeric features without aggregation
    raw_n: []
    # Global switch for categorical features
    use_cat: False
    # If client attributes are taken into consideration
    use_cli_attrs: False
    # If client identifiers are taken into consideration to help learn
    # the client-specific patterns (*need to clarify)
    use_chid: False
    # If chid is treated as a categorical feature
    chid_as_cat: False
    # If shop tags are taken into consideration to help learn the
    # shop_tag-specific patterns (*need to clarify)
    use_shop_tag: False
    
    # =TIFU-KNN (tmp fixed)=
    # If client predicting vectors from TIFU-KNN are considered
    use_tifu_pred_vecs: True
    tifu:
        # Whether to use client vector or predicting vectors, the choices are
        # as follows:
        #     {'cli', 'pred'}
        scale: ['cli',  'cli']
        # The earliest time point to consider in purchasing map
#         t_lower_bound: [0, ]
        t_window: [12, 6]
        gp_size: [3, 1]
        decay_wt_g: [0.5, 1] 
        decay_wt_b: [0.9, 1]
        alpha: [0.9, 0.9]
        sim_measure: ['cos', 'cos']
        k: [10, 10]
        n_neighbor_candidates: [1000, 1000]
        leg_only: [True, False]
        
    # =TIFU-like feature vectors=
    # If feature predicting vectors of any feature specified below are considered
    use_feat_pred_vecs: True
    feat:
        # feat_name: [scale, t_window, gp_size, decay_wt_g, decay_wt_b, alpha, sim_measure, k, n_neighbor_candidates, leg_only, shop_tag_slctn]
        # Observe change of rate of other feaures to think about gapping
        txn_amt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        domestic_offline_txn_amt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        domestic_offline_cnt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        domestic_online_txn_amt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        domestic_online_cnt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        card_1_txn_txn_amt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        card_2_txn_txn_amt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        card_4_txn_txn_amt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        card_6_txn_txn_amt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        card_other_txn_txn_amt: [['cli', 6, 3, 0.5, 0.9, 0.9, 'cos', 10, 1000, True, []], ]
        
#         t_lower_bound:   # See boxplot of numeric features versus `dt`
#         leg_only:# Will modify to flexible selection based on 49 shop_tags (illeg can act as feature), write to fp_pproc (see numeric versus shop_tag there's many interesting thing, e.g., overseas_offline for shop_tag 29) 

    # Feature prediction matrix post processing for computing stats on feature vectors
    # derived using different parameter sets, and selecting which to use in modeling .
    fp_pproc: 
#         txn_cnt:
#             stats: []
#             raw_vecs_to_drop: []
#         txn_amt: 
#             # Support {'mean', 'median', 'std', 'skew', 'kurt'}
#             stats: []
#             # Indices of parameter set, starting from 0.
#             raw_vecs_to_drop: []
        
    # =Transaction-related features (tmp fixed)=
    # If transaction-related feature vectors are considered
    use_txn_related_feats: True
    txn_feat_candidates: 
        gap_since_first: null
        gap_since_last: leg
        avg_gap: null
        st_tgl: leg
        made_ratio: leg
        n_shop_tags: null
        purch_t_end: null
        
    # =Groupby stats=
    # Whether to compute groupby stats based on specified groupby keys,
    # where keys can be client attributes, txn_apc_states or both
    use_gp_stats: False
    gp_stats: null
#         - keys: 
#             cli_attrs: [masts, trdtp, poscd, cuorg, gender_code, age]
#             apc_states: []
#           cfg: [[txn_cnt], 6, 'leg', 
#                 ['nanmean', 'nanmedian', 'nanquantile_0.25', 'nanquantile_0.75', 'nanstd']]
#         - keys: 
#             cli_attrs: [masts, educd, naty, poscd, cuorg]
#             apc_states: []
#           cfg: [[txn_amt], 6, 'all', 
#                 ['nanmean', 'nanmedian', 'nanquantile_0.25', 'nanquantile_0.75', 'nanstd']]
#                 !!python/tuple [17, 22]